# ------------------------------------------------------------------------------------------
# This is a workflow to build U-Boot mainline for Odroid M1.
# According to: https://github.com/u-boot/u-boot/blob/master/doc/board/rockchip/rockchip.rst
#
# ------------------------------------------------------------------------------------------
name: Build U-Boot for Odroid M1 (mainline)

on:
  workflow_dispatch:
  #push:
  #  tags:
  #    - 'v[0-9]+.[0-9]+.[0-9]+'
  #    - 'v[0-9]+.[0-9]+.[0-9]+.[0-9]+'
  push:
    branches:
      - master
  #schedule:
  #    - cron: 0 8 * * 5

jobs:
  job1_Build:
    name: Build U-Boot (mainline)
    runs-on: ubuntu-latest
    steps:
      - name: Initialize Environment
        run: |
          TOOLCHAIN_URL_VERSION=7.4-2019.02
          TOOLCHAIN_FILE_VERSION=7.4.1-2019.02
          TOOLCHAIN_TARGET=aarch64-linux-gnu
          TOOLCHAIN_HOST=x86_64
          TOOLCHAIN_FULL_NAME=gcc-linaro-${TOOLCHAIN_FILE_VERSION}-${TOOLCHAIN_HOST}_${TOOLCHAIN_TARGET}
          echo "TOOLCHAIN_URL_VERSION=${TOOLCHAIN_URL_VERSION}" >> $GITHUB_ENV
          echo "TOOLCHAIN_FILE_VERSION=${TOOLCHAIN_FILE_VERSION}" >> $GITHUB_ENV
          echo "TOOLCHAIN_TARGET=${TOOLCHAIN_TARGET}" >> $GITHUB_ENV
          echo "TOOLCHAIN_HOST=${TOOLCHAIN_HOST}" >> $GITHUB_ENV
          echo "TOOLCHAIN_FULL_NAME=${TOOLCHAIN_FULL_NAME}" >> $GITHUB_ENV

      - name: Log Environment
        run: |
          echo "  TOOLCHAIN_URL_VERSION:  ${TOOLCHAIN_URL_VERSION}"
          echo "  TOOLCHAIN_FILE_VERSION: ${TOOLCHAIN_FILE_VERSION}"
          echo "  TOOLCHAIN_TARGET:       ${TOOLCHAIN_TARGET}"
          echo "  TOOLCHAIN_HOST:         ${TOOLCHAIN_HOST}"
          echo "  TOOLCHAIN_FULL_NAME:    ${TOOLCHAIN_FULL_NAME}"

      - name: Prepare folders
        run: |
          mkdir -p cache/{toolchains,tmp}
          mkdir -p output/{spl,tpl}

      - name: Install Packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: lzop build-essential gcc bc libncurses5-dev libc6-i386 lib32stdc++6 zlib1g device-tree-compiler python2 python3-pyelftools
          # Cache version:
          version: 1.0

      - name: Install Toolchain
        run: |
          curl -L -o cache/toolchains/${{ env.TOOLCHAIN_FULL_NAME }}.tar.xz https://releases.linaro.org/components/toolchain/binaries/${{ env.TOOLCHAIN_URL_VERSION }}/${{ env.TOOLCHAIN_TARGET }}/${{ env.TOOLCHAIN_FULL_NAME }}.tar.xz
          tar -xvf cache/toolchains/${{ env.TOOLCHAIN_FULL_NAME }}.tar.xz -C cache/toolchains/
          rm --verbose -rf cache/toolchains/${{ env.TOOLCHAIN_FULL_NAME }}.tar.xz

      - name: Checkout M1 U-Boot
        run: |
          # mainline from Jonas Karlman with recent patches not yet merged to mainline u-boot
          git clone --progress --verbose --depth 1 --branch rk3568_mainline_MH https://github.com/MHARMBIAN/u-boot-kwiboo_Jonas_Karlman.git u-boot

      - name: Checkout rkbin
        run: |
          git clone --progress --verbose --depth 1 --branch rk3568_MH https://github.com/MHARMBIAN/rklinux_rkbin.git rkbin

      - name: Compile U-Boot
        run: |
          export PATH=$(pwd)/cache/toolchains/${{ env.TOOLCHAIN_FULL_NAME }}/bin:$PATH
          cd u-boot
          export ARCH=arm64
          export CROSS_COMPILE=${{ env.TOOLCHAIN_TARGET }}-
          #export BL31=../arm-trusted-firmware/build/rk3568/release/bl31/bl31.elf
          export BL31=../rkbin/bin/rk35/rk3568_bl31_v1.42.elf
          export ROCKCHIP_TPL=../rkbin/bin/rk35/rk3568_ddr_1560MHz_v1.16.bin
          #git submodule init
          #git submodule update
          #./make.sh odroid_rk3568
          make clean
          make odroid-m1-rk3568_defconfig
          make
          ls -alR > ../output/u-boot_dir_dump.txt
          cp --verbose *.bin ../output
          cp --verbose *.dtb ../output
          cp --verbose *.img ../output
          cp --verbose *.itb ../output
          cp --verbose *.sym ../output
          if [[ -d tpl ]]; then
            cp --verbose -R tpl/*.bin ../output/tpl
            cp --verbose -R tpl/*.sym ../output/spl
          fi
          cp --verbose -R spl/*.bin ../output/spl
          cp --verbose -R spl/*.dtb ../output/spl
          cp --verbose -R spl/*.sym ../output/spl
          cat << EOF > ../output/ReadeMe.txt
          How to use the U-Boot image files
          ---------------------------------
          As of git commit comment to SHA-1: ab900d518e47b4a81023a3f0b191be110c956ace
          on https://github.com/MHARMBIAN/u-boot-kwiboo_Jonas_Karlman.git

          Tested with a ODROID-M1 8GB v1.0 2022-06-13:
            - SD-card boot
            - eMMC boot
            - SPI Flash boot
            - PCIe/NVMe/AHCI
            - SATA port
            - USB host

          The generated u-boot-rockchip.bin image contain idbloader.img and
          u-boot.itb at the expected offset and should be written to sector 64
          of a SD-card or eMMC module.

          The generated u-boot-rockchip-spi.bin should be written to 0x0 of
          SPI Flash, the spi image use following offsets:
            - 0x8000: idbloader.img (TPL + SPL)
            - 0x60000: u-boot.itb (FIT image for U-Boot)
          =================================
          EOF

      - name: Upload U-Boot image
        uses: actions/upload-artifact@v3
        with:
          name: U-Boot Images
          path: |
            output/
